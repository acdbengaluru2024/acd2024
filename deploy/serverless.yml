service: acdbengaluru2024

plugins:
  - serverless-finch
  - serverless-cloudfront-invalidate

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ap-south-1

custom:
  client:
    bucketName: ${self:service}-cdn-${self:provider.stage}
    distributionFolder: ../
    manageResources: false
  cloudfrontInvalidate:
    - distributionIdKey: 'CDNDistributionId' #conditional, distributionId or distributionIdKey is required.
      items: # one or more paths required
        - '/*'

resources:
  Resources:
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-cdn-${self:provider.stage}
        AccessControl: Private
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn:
        - WebAppS3Bucket
        - WebAppCloudFrontOriginAccessIdentity
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal:
                CanonicalUser: !GetAtt WebAppCloudFrontOriginAccessIdentity.S3CanonicalUserId
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: ['', ['arn:aws:s3:::', { 'Ref': 'WebAppS3Bucket' }, '/*']]

    WebAppCloudFrontOriginAccessIdentity:
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: ${self:service} access identity

    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn: WebAppCloudFrontOriginAccessIdentity
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:service}-cdn-${self:provider.stage}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: ${self:service}
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    - - 'origin-access-identity/cloudfront/'
                      - Ref: WebAppCloudFrontOriginAccessIdentity
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          #   - ${self:custom.aliasNameExternal}
          #   - ${self:custom.aliasNameInternal}
          DefaultRootObject: index.html
          # CustomErrorResponses:
          #   - ErrorCode: 404
          #     ResponseCode: 200
          #     ResponsePagePath: /index.html
          #   - ErrorCode: 403
          #     ResponseCode: 200
          #     ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: ${self:service}
            ForwardedValues:
              QueryString: 'true'
            ViewerProtocolPolicy: redirect-to-https
          # PriceClass: PriceClass_200
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
            # AcmCertificateArn: ${self:custom.acmCertificateArn}
            # SslSupportMethod: sni-only
  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [WebAppCloudFrontDistribution, DomainName]
    CDNDistributionId:
      Description: CDN distribution id.
      Value:
        Ref: WebAppCloudFrontDistribution